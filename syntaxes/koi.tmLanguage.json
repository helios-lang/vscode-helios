{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Helios",
  "patterns": [
    { "include": "#annotation" },
    { "include": "#comment" },
    { "include": "#identifier" },
    { "include": "#keyword" },
    { "include": "#binding" },
    { "include": "#literal" },
    { "include": "#entity" },
    { "include": "#symbol" }
  ],
  "repository": {
    "annotation": {
      "name": "keyword.control.koi",
      "begin": "\\[(:|%)",
      "end": "\\1\\]"
    },


    "comment": {
      "patterns": [
        { "include": "#comment-line-documentation" },
        { "include": "#comment-line" },
        { "include": "#comment-block" }
      ]
    },
    "comment-line": {
      "name": "comment.line.koi",
      "begin": "#(?!(#|!))",
      "end": "\n"
    },
    "comment-line-documentation": {
      "name": "comment.line.documentation.koi",
      "begin": "#(#|!)",
      "end": "\n"
    },
    "comment-block": {
      "name": "comment.block.koi",
      "begin": "{([_[:alpha:]][[:word:]]*)?\\|",
      "end": "\\|\\1}"
    },


    "expression": {
      "patterns": [
        { "include": "#keyword" },
        { "include": "#literal" },
        { "include": "#entity" }
      ]
    },


    "identifier": {
      "patterns": [
        { "include": "#identifier-support-types" },
        { "include": "#identifier-support-functions" }
      ]
    },
    "identifier-support-types": {
      "name": "support.class.koi",
      "match": "(?<![[:word:]])(?:Array|Bool|Char|Float(32|64)?|U?Int(8|16|32|64|128)?|Maybe|Natural|Range|Result|String|Vector)(?![[:word:]])"
    },
    "identifier-support-functions": {
      "name": "support.function.koi",
      "match": "(?<![[:word:]])(?:assert(_eq)?|(e)?print(ln)?)(?![[:word:]])"
    },


    "keyword": {
      "patterns": [
        { "include": "#keyword-placeholder" },
        { "include": "#keyword-control" },
        { "include": "#keyword-descriptor" },
        { "include": "#keyword-structure" },
        { "include": "#keyword-implicit-parameter-name" }
      ]
    },
    "keyword-placeholder": {
      "name": "keyword.other.koi",
      "match": "\\?{3}"
    },
    "keyword-control": {
      "name": "keyword.control.helios",
      "match": "(?<![[:word:].:`])(?:and|as|break|case|continue|elif|else|for|if|in|not|of|or|return|while|yield)(?![[:word:]])"
    },
    "keyword-descriptor": {
      "name": "keyword.control.helios",
      "match": "(?<![[:word:].:`])(?:addr|ptr|ref|unsafe)(?![[:word:]])"
    },
    "keyword-structure": {
      "name": "keyword.other.helios",
      "match": "(?<![[:word:].:`])(?:const|enum|external|forall|func|impl|import|iter|let|module|range|record|self|subtype|test|to|trait|type|until|var|with)(?![[:word:]])"
    },
    "keyword-implicit-parameter-name": {
      "name": "keyword.control.koi keyword.other.koi",
      "match": "(?<![[:word:].:])\\$[[:digit:]]+(?![[:word:]])"
    },


    "literal": {
      "patterns": [
        { "include": "#literal-boolean" },
        { "include": "#literal-constructor" },
        { "include": "#literal-character" },
        { "include": "#literal-number" },
        { "include": "#literal-string" }
      ]
    },
    "literal-escape-sequence": {
      "name": "constant.character.escape.koi",
      "match": "(\\\\(?:x[A-Fa-f0-9]{2}|u{[A-fa-f0-9]{1,6}}|.|\\s))"
    },
    "literal-boolean": {
      "name": "constant.language.boolean.koi",
      "match": "(?<![[:word:]`])(True|False)(?![[:word:]])"
    },
    "literal-constructor": {
      "name": "support.class support.constant",
      "match": "(?<![[:word:]`])(Some|None|Ok|Error)(?![[:word:]])"
    },
    "literal-character": {
      "name": "string.quoted.single.koi",
      "match": "'[^']*'",
      "patterns": [
        { "include": "#literal-escape-sequence" }
      ]
    },
    "literal-number": {
      "name": "constant.numeric.koi",
      "match": "(?<![[:word:]])-?((?:0(b[0-1_]+|o[0-7_]+|x[0-9a-fA-F_]+))|[[:digit:]][[:digit:]_]*(?:\\.[[:digit:]][[:digit:]_]*)?)(?:(?:[iu](?:8|16|32|64)?|f(?:32|64)?))?(?![[:word:]])"
    },
    "literal-string": {
      "patterns": [
        { "include": "#literal-triple-quoted-string-raw" },
        { "include": "#literal-triple-quoted-string-format" },
        { "include": "#literal-triple-quoted-string-static" },
        { "include": "#literal-double-quoted-string-raw" },
        { "include": "#literal-double-quoted-string-format" },
        { "include": "#literal-double-quoted-string-static" }
      ]
    },
    "literal-string-contents": {
      "patterns": [
        { "include": "#literal-escape-sequence" }
      ]
    },
    "literal-string-interpolated-text": {
      "begin": "(?<!{){(?!{)",
      "end": "}(?:%[.<^>][[:digit:]]+)?",
      "beginCaptures": {
        "0": { "name": "constant.character.interpolation.koi" }
      },
      "endCaptures": {
        "0": { "name": "constant.character.interpolation.koi" }
      },
      "contentName": "meta.embedded.koi meta.embedded.line.koi meta.template.expression.koi",
      "patterns": [
        { "include": "#expression" }
      ]
    },
    "literal-triple-quoted-string-raw": {
      "name": "string.quoted.triple.raw.koi",
      "begin": "r(%*)\"{3}",
      "end": "\"{3}\\1"
    },
    "literal-triple-quoted-string-format": {
      "name": "string.quoted.triple.koi",
      "begin": "f(%*)\"{3}",
      "end": "\"{3}\\1",
      "patterns": [
        { "include": "#literal-string-contents" },
        { "include": "#literal-string-interpolated-text" }
      ]
    },
    "literal-triple-quoted-string-static": {
      "name": "string.quoted.triple.koi",
      "begin": "(%*)\"{3}",
      "end": "\"{3}\\1",
      "patterns": [
        { "include": "#literal-string-contents" }
      ]
    },
    "literal-double-quoted-string-raw": {
      "name": "string.quoted.double.raw.koi",
      "begin": "r(%*)\"",
      "end": "\"\\1"
    },
    "literal-double-quoted-string-format": {
      "name": "string.quoted.double.koi",
      "begin": "f(%*)\"",
      "end": "\"\\1",
      "patterns": [
        { "include": "#literal-string-contents" },
        { "include": "#literal-string-interpolated-text" }
      ]
    },
    "literal-double-quoted-string-static": {
      "name": "string.quoted.double.koi",
      "begin": "(%*)\"",
      "end": "\"\\1",
      "patterns": [
        { "include": "#literal-string-contents" }
      ]
    },


    "entity": {
      "patterns": [
        { "include": "#entity-function-binding" },
        { "include": "#entity-function-invocation" },
        { "include": "#entity-module-binding" },
        { "include": "#entity-type-binding" },
        { "include": "#entity-trait-binding" }
      ]
    },
    "entity-function-binding": {
      "name": "entity.name.function",
      "match": "(?<=func|iter)\\s+(`[_~!@#$%^&*+-=<>?\\\\/\\p{Sc}\\p{Sm}[:alpha:]][ _~!@#$%^&*+-=<>?\\\\/\\p{Sc}\\p{Sm}[:word:]]*`|[_[:alpha:]][[:word:]]*)"
    },
    "entity-function-invocation": {
      "name": "entity.name.function",
      "match": "(`[_~!@#$%^&*+-=<>?\\\\/\\p{Sc}\\p{Sm}[:alpha:]][ _~!@#$%^&*+-=<>?\\\\/\\p{Sc}\\p{Sm}[:word:]]*`|[_[:alpha:]][[:word:]]*)\\s*(?=\\((?!\\s*of\\W))"
    },
    "entity-module-binding": {
      "match": "(?<=module)\\s+([_[:alpha:]][[:word:].]*)",
      "captures": {
        "1": { "name": "entity.name.type" }
      }
    },
    "entity-type-binding": {
      "match": "(?<=type)\\s+([_[:alpha:]][[:word:]]*)",
      "captures": {
        "1": { "name": "entity.name.type" }
      }
    },
    "entity-trait-binding": {
      "match": "(?<=trait)\\s+([_[:alpha:]][[:word:]]*)",
      "captures": {
        "1": { "name": "entity.name.type" }
      }
    },


    "symbol": {
      "name": "keyword.other.koi",
      "match": "(\\.{2}|\\+|-|\\*|\\/|(:|!)?=|;|~|@|\\$|%|&|\\||\\^|<|>)"
    }
  },
  "scopeName": "source.helios"
}
