{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Koi",
  "patterns": [
    { "include": "#annotation" },
    { "include": "#comment" },
    { "include": "#identifier" },
    { "include": "#keyword" },
    { "include": "#binding" },
    { "include": "#literal" },
    { "include": "#entity" },
    { "include": "#symbol" }
  ],
  "repository": {
    "annotation": {
      "name": "keyword.control.koi",
      "begin": "\\[(:|%)",
      "end": "\\1\\]"
    },


    "comment": {
      "patterns": [
        { "include": "#comment-line-documentation" },
        { "include": "#comment-line" },
        { "include": "#comment-block-documentation" },
        { "include": "#comment-block" },
        { "include": "#shebang" }
      ]
    },
    "comment-line": {
      "name": "comment.line.koi",
      "begin": "/{2}(?!(!|/))",
      "end": "\n"
    },
    "comment-line-documentation": {
      "name": "comment.line.documentation.koi",
      "begin": "/{2}(/|!)",
      "end": "\n"
    },
    "comment-block": {
      "name": "comment.block.koi",
      "begin": "{([[:word:]@#%*]*)\\|",
      "end": "\\|\\1}",
      "patterns": [
        { "include": "#comment-block" }
      ]
    },
    "comment-block-documentation": {
      "name": "comment.block.documentation.koi",
      "begin": "{([[:word:]@#%*]*)\\|:",
      "end": "\\|\\1}",
      "patterns": [
        { "include": "#comment-block" }
      ]
    },
    "shebang": {
      "name": "comment.shebang.koi",
      "begin": "^#!(?!\\[)",
      "end": "\n"
    },


    "expression": {
      "patterns": [
        { "include": "#expression-record" },
        { "include": "#keyword" },
        { "include": "#literal" },
        { "include": "#entity" }
      ]
    },
    "expression-record": {
      "begin": "{",
      "end": "}",
      "patterns": [
        { "include": "$self" }
      ]
    },


    "identifier": {
      "patterns": [
        { "include": "#identifier-support-types" },
        { "include": "#identifier-support-functions" },
        { "include": "#identifier-enum-member" }
      ]
    },
    "identifier-support-types": {
      "name": "support.class.koi",
      "match": "(?<![[:word:]])(?:Bool|Char|Float(32|64)?|U?Int(8|16|32|64|128)?|Optional|Result|String|Self)(?![[:word:]])"
    },
    "identifier-support-functions": {
      "name": "support.function.koi",
      "match": "(?<![[:word:]])(?:assert(_eq)?|(e)?print(ln)?)(?![[:word:]])"
    },
    "identifier-enum-member": {
      "match": "(?<=case)\\s*([_[:alpha:]][[:word:]]*)",
      "captures": {
        "1": { "name": "variable.other.enumMember" }
      }
    },


    "keyword": {
      "patterns": [
        { "include": "#keyword-panic" },
        { "include": "#keyword-common" },
        { "include": "#keyword-structure" },
        { "include": "#keyword-miscellaneous" },
        { "include": "#keyword-implicit-parameter-name" }
      ]
    },
    "keyword-panic": {
      "name": "keyword.other.koi",
      "match": "\\?{1,3}|!"
    },
    "keyword-common": {
      "name": "keyword.other.koi",
      "match": "(?<![[:word:].:#])(?:case|const|enum|extend|fun|internal[ \t]*(\\([ \t]*(?:get|set)(?:[ \t]*;[ \t]*(?:get|set))?[ \t]*\\))?|let|macro|module|pub[ \t]*(\\([ \t]*(?:get|set)(?:[ \t]*;[ \t]*(?:get|set))?[ \t]*\\))?|struct|trait|type|using|var)(?![[:word:]])"
    },
    "keyword-structure": {
      "name": "keyword.control.koi keyword.other.koi",
      "match": "(?<![[:word:].:#])(?:_|and|as|catch|else|external|for|if|in|match|not|of|operator[ \t]*(\\((?:pre|in|post)fix\\))?|or|ref|return|self|super|take|try|where|while|with)(?![[:word:]])"
    },
    "keyword-miscellaneous": {
      "name": "keyword.control.koi keyword.other.koi",
      "match": "(?<![[:word:].:#])(?:get|set)(?![[:word:]])"
    },
    "keyword-implicit-parameter-name": {
      "name": "keyword.control.koi keyword.other.koi",
      "match": "(?<![[:word:].:])\\$[[:digit:]]+(?![[:word:]])"
    },


    "literal": {
      "patterns": [
        { "include": "#literal-boolean" },
        { "include": "#literal-constructor" },
        { "include": "#literal-character" },
        { "include": "#literal-number" },
        { "include": "#literal-string" }
      ]
    },
    "literal-escape-sequence": {
      "name": "constant.character.escape.koi",
      "match": "(\\\\(?:x[A-Fa-f0-9]{2}|u{[A-fa-f0-9]{1,6}}|.|\\s))"
    },
    "literal-boolean": {
      "name": "constant.language.boolean.koi",
      "match": "(?<![[:word:]#])(True|False)(?![[:word:]])"
    },
    "literal-constructor": {
      "name": "constant.language.boolean.koi",
      "match": "(?<![[:word:]#])(Some|None|Ok|Err)(?![[:word:]])"
    },
    "literal-character": {
      "name": "string.quoted.single.koi",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "include": "#literal-escape-sequence"
        }
      ]
    },
    "literal-number": {
      "name": "constant.numeric.koi",
      "match": "(?<![[:word:]])-?((?:0(b[0-1_]+|o[0-7_]+|x[0-9a-fA-F_]+))|[[:digit:]][[:digit:]_]*(?:\\.[[:digit:]][[:digit:]_]*)?)(?![[:word:]])"
    },
    "literal-string": {
      "patterns": [
        { "include": "#literal-triple-quoted-string-raw" },
        { "include": "#literal-triple-quoted-string-format" },
        { "include": "#literal-triple-quoted-string-static" },
        { "include": "#literal-double-quoted-string-raw" },
        { "include": "#literal-double-quoted-string-format" },
        { "include": "#literal-double-quoted-string-static" },
        { "include": "#literal-backtick-quoted-string-raw" },
        { "include": "#literal-backtick-quoted-string-format" },
        { "include": "#literal-backtick-quoted-string-static" }
      ]
    },
    "literal-string-contents": {
      "patterns": [
        { "include": "#literal-escape-sequence" }
      ]
    },
    "literal-string-interpolated-text": {
      "begin": "(?<!{){(?!{)",
      "end": "}(?:%[.<^>][[:digit:]]+)?",
      "beginCaptures": {
        "0": { "name": "constant.character.interpolation.koi" }
      },
      "endCaptures": {
        "0": { "name": "constant.character.interpolation.koi" }
      },
      "contentName": "meta.embedded.koi meta.embedded.line.koi meta.template.expression.koi",
      "patterns": [
        { "include": "#expression" }
      ]
    },
    "literal-triple-quoted-string-raw": {
      "name": "string.quoted.triple.raw.koi",
      "begin": "r\"{3}",
      "end": "\"{3}"
    },
    "literal-triple-quoted-string-format": {
      "name": "string.quoted.triple.koi",
      "begin": "f\"{3}",
      "end": "\"{3}",
      "patterns": [
        { "include": "#literal-string-contents" },
        { "include": "#literal-string-interpolated-text" }
      ]
    },
    "literal-triple-quoted-string-static": {
      "name": "string.quoted.triple.koi",
      "begin": "\"{3}",
      "end": "\"{3}",
      "patterns": [
        { "include": "#literal-string-contents" }
      ]
    },
    "literal-double-quoted-string-raw": {
      "name": "string.quoted.double.raw.koi",
      "begin": "r\"",
      "end": "\""
    },
    "literal-double-quoted-string-format": {
      "name": "string.quoted.double.koi",
      "begin": "f\"",
      "end": "\"",
      "patterns": [
        { "include": "#literal-string-contents" },
        { "include": "#literal-string-interpolated-text" }
      ]
    },
    "literal-double-quoted-string-static": {
      "name": "string.quoted.double.koi",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        { "include": "#literal-string-contents" }
      ]
    },
    "literal-backtick-quoted-string-raw": {
      "name": "string.quoted.koi",
      "begin": "r`",
      "end": "`"
    },
    "literal-backtick-quoted-string-format": {
      "name": "string.quoted.koi",
      "begin": "f`",
      "end": "`",
      "patterns": [
        { "include": "#literal-escape-sequence" },
        { "include": "#literal-string-interpolated-text" }
      ]
    },
    "literal-backtick-quoted-string-static": {
      "name": "string.quoted.koi",
      "begin": "`",
      "end": "`",
      "patterns": [
        { "include": "#literal-escape-sequence" }
      ]
    },


    "entity": {
      "patterns": [
        { "include": "#entity-function-binding" },
        { "include": "#entity-function-invocation" },
        { "include": "#entity-type-binding" },
        { "include": "#entity-variable-binding" }
      ]
    },
    "entity-function-binding": {
      "name": "entity.name.function",
      "match": "(?<=fun)\\s+(#?[_[:alpha:]][[:word:]]*)",
      "--match": "(?:(?<!#)fun)\\s+(#?[_[:alpha:]][[:word:]]*)",
      "--captures": {
        "1": { "name": "entity.name.function.koi" }
      }
    },
    "entity-function-invocation": {
      "name": "entity.name.function",
      "--match": "(#?[_[:alpha:]][[:word:]]*)\\s*(?=\\((?!\\s*of\\W)|{(?:.|\\s)*case|{.*=>)",
      "match": "(#?[_[:alpha:]][[:word:]]*)\\s*(?=\\((?!\\s*of\\W))"
    },
    "entity-type-binding": {
      "match": "(?<=extend|module|trait|type)\\s+(#?[_[:alpha:]][[:word:]]*)",
      "--match": "(?:(?<!#)(?:const|extend|module|trait|type))\\s+(#?[_[:alpha:]][[:word:]]*)",
      "captures": {
        "1": { "name": "entity.name.type" }
      }
    },
    "entity-variable-binding": {
      "match": "(?<=let|var)\\s+(#?[_[:alpha:]][[:word:]]*)",
      "captures": {
        "1": { "name": "variable.name.koi" }
      },
      "--FIXME": "Type annotation doesn't match if it has parameters (e.g. `Tree(of T)`)",
      "--match": "(?:(?<!#)(?:let|var))\\s+(#?[_[:alpha:]][[:word:]]*)(?:\\s*:\\s*([_[:alpha:]][[:word:]?]*|\\?{3}))?",
      "--captures": {
        "1": { "name": "variable.name.koi" },
        "2": { "name": "entity.name.type.koi" }
      }
    },


    "symbol": {
      "name": "keyword.other.koi",
      "match": "(\\+|-|\\*|\\/|=|;|~|@|\\$|%|&|\\||\\^|<|>)"
    }
  },
  "scopeName": "source.koi"
}
