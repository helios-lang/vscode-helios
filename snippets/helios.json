{
  "Begin-End block": {
    "prefix": [
      "begin"
    ],
    "body": [
      "begin",
      "\t${0:???}",
      "end"
    ]
  },
  "If expression": {
    "prefix": [
      "if"
    ],
    "body": [
      "if ${1:expr} then",
      "\t${2:???}",
      "else",
      "\t${0:???}"
    ]
  },
  "Let (global) binding": {
    "prefix": [
      "let"
    ],
    "body": "let ${1:ident} = ${0:???}"
  },
  "Let (local) binding": {
    "prefix": [
      "let-in"
    ],
    "body": [
      "let ${1:ident} = ${2:???} in",
      "${0:???}"
    ]
  },
  "Match clause": {
    "prefix": [
      "match"
    ],
    "body": [
      "match ${1:expr} with",
      "| ${2:pattern} -> ${0:expr}"
    ]
  },
  "Type declaration": {
    "prefix": [
      "type"
    ],
    "body": "type ${1:t} = ${0:()}"
  },
  "Type-alias declaration": {
    "prefix": [
      "type-alias"
    ],
    "body": "type alias ${1:t} = ${0:()}"
  },
  "Val declaration": {
    "prefix": [
      "val"
    ],
    "body": "val ${1:ident} : ${0:???}"
  }
}
